<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[单例模式]]></title>
    <url>%2F2018%2F04%2F12%2F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[什么是单例模式单例模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。 单例模式的优点 减少频繁创建，节省了cpu。 静态对象公用，节省了内存。 功能解耦，代码已维护。 单例模式的应用实际项目中像数据库查询，日志输出，全局回调，统一校验等模块。这些模块功能单一，但需要多次访问，如果能够全局唯一，多次复用会大大提升性能。这也就是单例存在的必要性。 如何设计单例模式通过上面的描述，单例的核心是，实例一次生成，全局唯一，多次调用。因此在单例模式必须包含三要素：1、私有化构造函数，私有化clone。也就是不能new，不能clone【唯一】2、拥有一个静态变量，用于保存当前的类。【唯一如何保存】3、提供一个公共的访问入口。【可以访问】 PHP实现php实现的单例模式12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?phpclass Singleton&#123; // 私有化构造方法 private function __construct() &#123; &#125; // 私有化clone方法 private function __clone() &#123; &#125; // 保存实例的静态对象 public static $singleInstance; /** * 声明静态调用方法 * 目的：保证该方法的调用全局唯一 * * @return Singleton */ public static function getInstance() &#123; if (!self::$singleInstance) &#123; self::$singleInstance = new self(); &#125; return self::$singleInstance; &#125; // 调用单例的方法 public function singletonFunc() &#123; echo &quot;call single ton method&quot;; &#125;&#125;$singleInstance = Singleton::getInstance();$singleInstance-&gt;singletonFunc();$singleInstance2 = Singleton::getInstance();$singleInstance2-&gt;singletonFunc();// 校验是否是一个实例var_dump($singleInstance === $singleInstance2); // true ，一个对象 php中static 属性和方法的继承问题（补充知识）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Base&#123; public static $var = &apos;var&apos;; public static function testStaticFun() &#123; echo &apos;func&apos;; &#125;&#125;class A extends Base&#123; public function testSelf() &#123; echo self::$var; &#125; public function testParent() &#123; echo parent::$var; &#125; public function setSelf() &#123; self::$var = &apos;self&apos;; &#125; public function setParent() &#123; parent::$var = &apos;parent&apos;; &#125; public static function testStaticFun() &#123; parent::testStaticFun(); echo &apos;over&apos;; &#125;&#125;$objA = new A(); $objA-&gt;testSelf(); // var$objA-&gt;testParent(); // var$objA-&gt;setSelf();$objA-&gt;testSelf(); // self$objA-&gt;testParent(); // selfecho Base::$var; // self$objA-&gt;setParent();$objA-&gt;testSelf(); // parent$objA-&gt;testParent(); // parentecho Base::$var; // parentBase::testStaticFun(); // funcA::testStaticFun(); // func over 1、静态成员可以使用 访问控制关键字修饰，可以被继承和重写也就就说子类可以继承到父类的静态变量、方法…遵循“关键字”规则2、如果子类没有重写，那么子类调用的实际是父类的静态方法这个也很简单明了，继承的基本规则，没什么好解释的3、静态成员持有者是类不是对象，所以类的多个实例共享同一个静态属性的，在一个实例中修改静态属性会影响到另一个实例中的静态属性。这个就是重点了，好好理解下，单列模式也是利用这个特性。 所以代码中 self::$var 和 parent::$var 其实指向的都是父类中的$var最后举个栗子：单例模式下，$var你可以理解为数据库连接，父类生成一个连接后，继承的子类直接使用这个连接即可连接使用数据库。但是如果子类自己生成一个连接$var，那么使用的时候就要区分是self::$var还是parent::$var，因为俩个值可能不一样，连接的数据库也不一样,万一是主从呢。]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书单]]></title>
    <url>%2F2018%2F04%2F09%2F%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[经过自己的收集和小伙伴推荐，感觉下面的书不错，书单如下： 鸟哥的Linux私房菜（第四版） Shell脚本学习指南 大话数据结构（程杰版） 大话设计模式（程杰版） 高性能MySQL（第三版） Redis设计与实现（黄健宏版） MongoDB权威指南 HTTP权威指南（陈涓、赵振平译） 构建高性能Web 站点（郭欣版） PHP核心技术与最佳实践（列旭松、陈文著） 另附书籍电子版链接，需要自取。链接: https://pan.baidu.com/s/1NqyZLUu6MEI9C6GY1WXrWA 密码: ivfq 支持正版，侵删。 如链接失效，可留言或email。闲暇时间吃起来，精神食粮 ～～～]]></content>
      <tags>
        <tag>书单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown简明语法手册]]></title>
    <url>%2F2018%2F04%2F01%2FMarkdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[博客常用Markdown编辑，但是过段时间不用，语法就会生疏，现将常用语法记录如下，方便查阅。 斜体和粗体斜体 用 * 包起来粗体 用 ** 包起来 分级标题只需要在文本前加上#即可，#增多，相应的标题字号降低。注：# 和 标题之间建议保留一个字符的空格。 列表无序列表：文字前面加 -有序列表：文字前面加上1.2.3.就可以了注：-、1. 和文本之间要保留一个字符的空格 超链接使用 [描述](链接地址) 为文字增加外链接。插入图片![描述]（图片链接地址） 引用他人文字在文字前面加上 &gt;注：&gt; 和文本之间要保留一个字符的空格。 代码引用需要引用代码时，如果只有一段，不分行，可以用` 将语句包起来。如果引用语句为多行，可以用 ``` 将这段语句包起来。 删除线使用～～表示删除线将用删除线划掉的文字 用～～包围 注脚使用 [^keyword] 表示注脚。 以上几种格式是比较常用的格式，如公式、图形绘制等高级功能，可以在具体使用时参阅Cmd Markdown语法说明。]]></content>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
</search>
